"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Query {
  communicationChannelCalendarEvents: CommunicationChannelCalendarEventQuery
  communicationChannelMessages: CommunicationChannelMessageQuery
  communicationChannelRoles: CommunicationChannelRoleQuery
  communicationChannels: CommunicationChannelQuery
  groupRoles: GroupRoleQuery
  groups: GroupQuery
  userAliases: UserAliasQuery
  users: UserQuery
}

type UserQuery {
  get(searchTerm: String!, excludeUsersFromChannelWithId: String, pageNumber: Int! = 1, pageSize: Int! = 10): PaginationListUserGraphType
  getForCommunicationChannel(channelId: ID!, pageNumber: Int! = 1, pageSize: Int! = 10): PaginationListUserGraphType
  getForGroup(groupId: ID!, pageNumber: Int! = 1, pageSize: Int! = 10): PaginationListUserGraphType
}

type PaginationListUserGraphType {
  data: [User]
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  pageIndex: Int!
  totalCount: Int!
  totalPages: Int!
}

type User {
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime
  userName: String!
}

"""
The `DateTime` scalar type represents a date and time. `DateTime` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar DateTime

type UserAliasQuery {
  get(id: ID!): UserAlias
  getForUser(userId: ID!, pageNumber: Int! = 1, pageSize: Int! = 10): PaginationListUserAliasGraphType
}

type UserAlias {
  alias: String!
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime
  userId: String!
}

type PaginationListUserAliasGraphType {
  data: [UserAlias]
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  pageIndex: Int!
  totalCount: Int!
  totalPages: Int!
}

type GroupQuery {
  get(id: ID!): Group
  getForUser(userId: ID!, pageNumber: Int! = 1, pageSize: Int! = 10): PaginationListGroupGraphType
}

type Group {
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime
  name: String!
}

type PaginationListGroupGraphType {
  data: [Group]
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  pageIndex: Int!
  totalCount: Int!
  totalPages: Int!
}

type GroupRoleQuery {
  get(id: ID!): GroupRole
  getForUserInGroup(userId: ID!, groupId: ID!, pageNumber: Int! = 1, pageSize: Int! = 10): PaginationListGroupRoleGraphType
}

type GroupRole {
  createdAt: DateTime!
  id: String!
  modifiedAt: DateTime
  name: String!
}

type PaginationListGroupRoleGraphType {
  data: [GroupRole]
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  pageIndex: Int!
  totalCount: Int!
  totalPages: Int!
}

type CommunicationChannelQuery {
  get(id: ID!): CommunicationChannel
  getForUser(userId: String!, pageNumber: Int! = 1, pageSize: Int! = 10): PaginationListCommunicationChannelGraphType
}

type CommunicationChannel {
  createdAt: DateTime!
  description: String!
  id: String!
  modifiedAt: DateTime
  name: String!
}

type PaginationListCommunicationChannelGraphType {
  data: [CommunicationChannel]
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  pageIndex: Int!
  totalCount: Int!
  totalPages: Int!
}

type CommunicationChannelMessageQuery {
  get(id: ID!): CommunicationChannelMessage
  getForChannel(channelId: ID!, pageNumber: Int! = 1, pageSize: Int! = 10): PaginationListCommunicationChannelMessageGraphType
}

type CommunicationChannelMessage {
  content: String!
  createdAt: DateTime!
  channelId: String!
  id: String!
  modifiedAt: DateTime
  type: asdf
  userId: String!
  userName: String!
}

enum asdf {
  NORMAL
  ANNOUNCEMENT
}

type PaginationListCommunicationChannelMessageGraphType {
  data: [CommunicationChannelMessage]
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  pageIndex: Int!
  totalCount: Int!
  totalPages: Int!
}

type CommunicationChannelRoleQuery {
  get(id: ID!): CommunicationChannelRole
  getForUserInChannel(userId: ID!, channelId: ID!, pageNumber: Int! = 1, pageSize: Int! = 10): PaginationListCommunicationChannelRoleGraphType
}

type CommunicationChannelRole {
  createdAt: DateTime!
  channelId: String!
  id: String!
  modifiedAt: DateTime
  name: String!
}

type PaginationListCommunicationChannelRoleGraphType {
  data: [CommunicationChannelRole]
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  pageIndex: Int!
  totalCount: Int!
  totalPages: Int!
}

type CommunicationChannelCalendarEventQuery {
  get(id: ID!): CommunicationChannelCalendarEvent
  getForCommunicationChannel(channelId: String!, pageNumber: Int! = 1, pageSize: Int! = 10): PaginationListCommunicationChannelCalendarEventGraphType
}

type CommunicationChannelCalendarEvent {
  authorId: String!
  authorName: String!
  createdAt: DateTime!
  description: String!
  endsAt: DateTime
  id: String!
  modifiedAt: DateTime
  name: String!
  startsAt: DateTime!
}

type PaginationListCommunicationChannelCalendarEventGraphType {
  data: [CommunicationChannelCalendarEvent]
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  pageIndex: Int!
  totalCount: Int!
  totalPages: Int!
}

type Mutation {
  communicationChannelCalendarEvents: CommunicationChannelCalendarEventMutation
  communicationChannelMessageAttachments: CommunicationChannelMessageAttachmentMutation
  communicationChannelMessages: CommunicationChannelMessageMutation
  communicationChannelRoles: CommunicationChannelRoleMutation
  communicationChannels: CommunicationChannelMutation
  groupRoles: GroupRoleMutation
  groups: GroupMutation
  userAliases: UserAliasMutation
  users: UserMutation
}

type UserMutation {
  create: String
  delete(id: String!): Boolean
}

type UserAliasMutation {
  create(alias: String!): String
  delete(id: String!): Boolean
  update(id: String!, alias: String!): Boolean
}

type GroupMutation {
  addUser(userId: String!, groupId: String!): Boolean
  create(name: String!): String
  delete(id: String!): Boolean
  removeUser(userId: String!, groupId: String!): Boolean
  update(id: String!, name: String!): Boolean
}

type GroupRoleMutation {
  create(name: String!, groupId: String!, permission: Int!): String
  delete(id: String!): Boolean
  update(id: String!, name: String!): Boolean
}

type CommunicationChannelMutation {
  addUser(userId: String!, channelId: String!): Boolean
  create(name: String!, desc: String!): CommunicationChannel
  delete(id: String!): Boolean
  removeUser(userId: String!, channelId: String!): Boolean
  update(id: String!, name: String!, desc: String!): Boolean
}

type CommunicationChannelMessageMutation {
  create(userId: String!, channelId: String!, content: String!, type: Int!): CommunicationChannelMessage
  delete(id: String!): Boolean
  update(id: String!, content: String!): Boolean
}

type CommunicationChannelRoleMutation {
  create(channelId: String!, name: String!, permission: Int!): String
  delete(id: String!): Boolean
  update(id: String!, content: String!): Boolean
}

type CommunicationChannelMessageAttachmentMutation {
  create(name: String!, content: String!, permission: Int!, messageId: String!): String
  delete(id: String!): Boolean
  update(id: String!, name: String!): Boolean
}

type CommunicationChannelCalendarEventMutation {
  create(channelId: String!, name: String!, desc: String!, startsAt: Date, endsAt: Date!): CommunicationChannelCalendarEvent
  delete(id: String!): Boolean
  update(id: String!, name: String!, desc: String!, startsAt: Date, endsAt: Date!): Boolean
}

"""
The `Date` scalar type represents a year, month and day in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar Date

type Subscription {
  communicationChannelAddedForUser(userId: String!): CommunicationChannel
  communicationChannelMessageAddedToChannel(channelId: String!): CommunicationChannelMessage
}
